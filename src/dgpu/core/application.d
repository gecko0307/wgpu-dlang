/*
Copyright (c) 2017-2023 Timur Gafarov

Boost Software License - Version 1.0 - August 17th, 2003
Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

/++
    Base class to inherit applications from.
+/
module dgpu.core.application;

import std.stdio;
import std.conv;
import std.getopt;
import std.string;
import std.file;
import std.algorithm: canFind;

import bindbc.sdl;
import bindbc.wgpu;
import sharedlibLoader = bindbc.loader.sharedlib;

import dlib.core.memory;
import dlib.filesystem.stdfs;
import dgpu.core.event;
import dgpu.core.time;
import dgpu.core.logger;
import dgpu.core.gpu;

enum AppEvent
{
    Exit = -1
}

/++
    Base class to inherit applications from.
    `Application` wraps SDL2 window, loads dynamic link libraries using BindBC,
    is responsible for initializing OpenGL context and doing main game loop.
+/
class Application: EventListener
{
    uint width;
    uint height;
    SDL_Window* window = null;
    private EventManager _eventManager;
    private Logger _logger;
    Logger logger;
    Cadencer cadencer;
    GPU gpu;
    StdFileSystem fs;

    /++
        Constructor.
        * `winWidth` - window width
        * `winHeight` - window height
        * `fullscreen` - if true, the application will run in fullscreen mode
        * `windowTitle` - window title
        * `args` - command line arguments
        * `logger` - optional custom logger to print messages
    +/
    this(uint winWidth, uint winHeight, bool fullscreen, string windowTitle, string[] args, Logger userLogger = null)
    {
        fs = New!StdFileSystem();
        
        _logger = New!Logger(this);
        if (userLogger)
            logger = userLogger;
        else
            logger = _logger;
        
        SDLSupport sdlSup = loadSDL();
        if (sdlSup != sdlSupport)
        {
            if (sdlSup == SDLSupport.badLibrary)
                logger.log("Failed to load some SDL functions. It seems that you have an old version of SDL. The engine will try to use it, but it is recommended to install SDL 2.0.14 or higher");
            else
                logger.error("SDL library is not found. Please, install SDL 2.0.14 or higher");
        }
        
        WGPUSupport wgpuSup = loadWGPU();
        if (wgpuSup != WGPUSupport.wgpu022)
        {
            if (wgpuSup == WGPUSupport.badLibrary)
                logger.log("Failed to load some WGPU functions");
            else
                logger.error("WGPU library is not found. Please, install WGPU 22.1 or higher");
        }
        
        if (sharedlibLoader.errors.length)
        {
            logger.log("Loader errors:");
            foreach(info; sharedlibLoader.errors)
            {
                logger.log(to!string(info.error) ~ ": " ~ to!string(info.message));
            }
        }
        
        version(OSX)
        {
            SDL_SetHint(SDL_HINT_RENDER_DRIVER, toStringz("metal"));
        }

        if (SDL_Init(SDL_INIT_EVERYTHING) != 0)
            logger.error("Failed to init SDL: " ~ to!string(SDL_GetError()));

        width = winWidth;
        height = winHeight;

        window = SDL_CreateWindow(toStringz(windowTitle),
            SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,
            width, height,
            SDL_WINDOW_SHOWN | SDL_WINDOW_RESIZABLE);
        if (window is null)
            logger.error("Failed to create window: " ~ to!string(SDL_GetError()));
        
        if (fullscreen)
            SDL_SetWindowFullscreen(window, SDL_WINDOW_FULLSCREEN);
        
        gpu = New!GPU(this);
        
        _eventManager = New!EventManager(window, width, height);
        super(_eventManager, null);
        
        cadencer = New!Cadencer(&onAnimationFrame, 60, this);
    }

    ~this()
    {
        Delete(fs);
        SDL_DestroyWindow(window);
        SDL_Quit();
        Delete(_eventManager);
    }

    void maximizeWindow()
    {
        SDL_MaximizeWindow(window);
    }

    override void onUserEvent(int code)
    {
        if (code == AppEvent.Exit)
        {
            exit();
        }
    }

    void onUpdate(Time t)
    {
        // Override me
    }

    void onRender()
    {
        // Override me
    }

    void onAnimationFrame(Time t)
    {
        eventManager.update();
        processEvents();
        
        // wgpu crashes when rendering to minimized window
        auto winFlags = SDL_GetWindowFlags(window);
        auto isMinimized = winFlags & SDL_WINDOW_MINIMIZED;
        if (!isMinimized)
        {
            onUpdate(t);
            onRender();
        }
    }

    void run()
    {
        Time t = Time(0.0, 0.0);
        while(eventManager.running)
        {
            eventManager.updateTimer();
            t.delta = eventManager.deltaTime;
            cadencer.update(t);
            t.elapsed += t.delta;
        }
    }

    void exit()
    {
        eventManager.exit();
    }
}
