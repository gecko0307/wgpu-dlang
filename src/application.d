/*
Copyright (c) 2020 Timur Gafarov.

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module application;

import core.stdc.stdlib;
import std.stdio;
import std.conv;
import bindbc.sdl;
import bindbc.wgpu;
import dlib.core.memory;
import window;

void quit(string message)
{
    writeln(message);
    core.stdc.stdlib.exit(1);
}

static this()
{
    writeln("Initialization...");
    auto sdlSupport = loadSDL();
    writeln("sdlSupport: ", sdlSupport);

    if (sdlSupport == SDLSupport.noLibrary)
        quit("Error: SDL is not installed");

    auto wgpuSupport = loadWGPU();
    writeln("wgpuSupport: ", wgpuSupport);

    if (wgpuSupport == WGPUSupport.noLibrary)
        quit("Error: WGPU is not installed");

    version(OSX)
    {
        SDL_SetHint(SDL_HINT_RENDER_DRIVER, toStringz("metal"));
    }

    if (SDL_Init(SDL_INIT_EVERYTHING) == -1)
        quit("Error: failed to init SDL: " ~ to!string(SDL_GetError()));
    writeln("OK");
}

static ~this()
{
    writeln("Deinitialization...");
    SDL_Quit();
    writeln("OK");
}

class Application
{
    Window window;

    this(uint windowWidth, uint windowHeight)
    {
        window = New!Window(windowWidth, windowHeight, "SDL Application");
    }

    ~this()
    {
        Delete(window);
    }
}

private extern(C) void requestAdapterCallback(WGPUAdapterId adapter, void* userdata)
{
    *cast(WGPUAdapterId*)userdata = adapter;
}

class WGPUApplication: Application
{
    protected:
    WGPUAdapterId _adapter;
    WGPUDeviceId _device;
    WGPUQueueId _queue;
    WGPUSurfaceId _surface;
    WGPUSwapChainId _swapchain;

    public:
    this(uint windowWidth, uint windowHeight)
    {
        super(windowWidth, windowHeight);
        init();
    }

    ~this()
    {

    }

    protected:
    void init()
    {
        writeln("Adapter...");
        _adapter = requestAdapter();
        writeln("OK");

        writeln("Device...");
        _device = requestDevice();
        _queue = wgpu_device_get_queue(_device);
        writeln("OK");

        writeln("Surface...");
        _surface = createSurface();
        writeln("OK");

        writeln("Swapchain...");
        _swapchain = createSwapchain(window.width, window.height);
        writeln("OK");
    }

    WGPUAdapterId requestAdapter()
    {
        WGPURequestAdapterOptions reqAdaptersOptions =
        {
            power_preference: WGPUPowerPreference.HighPerformance
        };
        WGPUAdapterId resAdapter;
        wgpu_request_adapter_async(&reqAdaptersOptions, 2 | 4 | 8, &requestAdapterCallback, &resAdapter);
        return resAdapter;
    }

    WGPUDeviceId requestDevice()
    {
        WGPUDeviceDescriptor deviceDescriptor =
        {
            extensions:
            {
                anisotropic_filtering: false
            },
            limits:
            {
                max_bind_groups: WGPUDEFAULT_BIND_GROUPS
            }
        };
        return wgpu_adapter_request_device(_adapter, &deviceDescriptor);
    }

    WGPUSurfaceId createSurface()
    {
        SDL_SysWMinfo wmInfo = window.wmInfo;
        writeln("Subsystem: ", wmInfo.subsystem);
        WGPUSurfaceId surf;

        version(Windows)
        {
            if (wmInfo.subsystem == SDL_SYSWM_WINDOWS)
            {
                auto win_hwnd = wmInfo.info.win.window;
                auto win_hinstance = wmInfo.info.win.hinstance;
                surf = wgpu_create_surface_from_windows_hwnd(win_hinstance, win_hwnd);
            }
            else
            {
                quit("Unsupported subsystem, sorry");
            }
        }
        else version(linux)
        {
            // Needs test!
            if (wmInfo.subsystem == SDL_SYSWM_X11)
            {
                auto x11_display = wmInfo.info.x11.display;
                auto x11_window = wmInfo.info.x11.window;
                surf = wgpu_create_surface_from_xlib(cast(void**)x11_display, x11_window);
            }
            else if (wmInfo.subsystem == SDL_SYSWM_WAYLAND)
            {
                auto wl_surface = wmInfo.info.wl.surface;
                auto wl_display = wmInfo.info.wl.display;
                surf = wgpu_create_surface_from_wayland(wl_surface, wl_display);
            }
            else
            {
                quit("Unsupported subsystem, sorry");
            }
        }
        else version(OSX)
        {
            // Needs test!
            SDL_Renderer* renderer = SDL_CreateRenderer(window.sdlWindow, -1, SDL_RENDERER_PRESENTVSYNC);
            auto m_layer = SDL_RenderGetMetalLayer(renderer);
            surf = wgpu_create_surface_from_metal_layer(m_layer);
            SDL_DestroyRenderer(renderer);
        }
        else
        {
            quit("Unsupported system, sorry");
        }

        return surf;
    }

    WGPUSwapChainId createSwapchain(uint w, uint h)
    {
        WGPUSwapChainDescriptor sd = {
            usage: WGPUTextureUsage_OUTPUT_ATTACHMENT,
            format: WGPUTextureFormat.Bgra8Unorm,
            width: w,
            height: h,
            present_mode: WGPUPresentMode.Vsync
        };
        return wgpu_device_create_swap_chain(device, surface, &sd);
    }

    public:
    WGPUAdapterId adapter()
    {
        return _adapter;
    }

    WGPUDeviceId device()
    {
        return _device;
    }

    WGPUQueueId queue()
    {
        return _queue;
    }

    WGPUSurfaceId surface()
    {
        return _surface;
    }

    WGPUSwapChainId swapchain()
    {
        return _swapchain;
    }

    void resize(uint w, uint h)
    {
        _swapchain = createSwapchain(w, h);
    }
}
